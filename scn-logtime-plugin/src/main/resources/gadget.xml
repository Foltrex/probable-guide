<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs author="ScienceSoft"
                 title="JIRA LogTime Gadget"
			directory_title="ScienceSoft LogTime Gadget"
			description="A sample gadget to install into JIRA."
            screenshot='#staticResourceUrl("com.scn.jira.scn-logtime-plugin:logtime-gadget", "logtime-gadget-screenshot.png")'
            thumbnail='#staticResourceUrl("com.scn.jira.scn-logtime-plugin:logtime-gadget", "logtime-gadget-thumb.png")'>
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
            </Param>
        </Optional>
		<Require feature="dynamic-height"/>
		<Require feature="setprefs" />
        <Require feature="views" />
        <Optional feature="atlassian.util" />
        <Optional feature="auth-refresh" />
        <Require feature="oauthpopup" />
        <Require feature="settitle"/>
        #oauth

     <Locale messages="__ATLASSIAN_BASE_URL__/download/resources/scn-logtime-plugin/i18n/ALL_ALL.xml"/> 
     #supportedLocales("gadget.common")
   
    </ModulePrefs>

	<UserPref name="isConfigured" datatype="hidden" default_value="true" />
	<UserPref name="project" datatype="hidden"  default_value="1"/>
	<UserPref name="wlScnCheck"  datatype="hidden"  default_value="true"/>
	<UserPref name="wlExtCheck" datatype="hidden" default_value="false"/>
	<UserPref name="projectlist" datatype="hidden" default_value=""/>
	<UserPref name="userslist" datatype="hidden" default_value=""/>
	<UserPref name="refresh" datatype="hidden" default_value="false" />
	<UserPref name="width" datatype="hidden" default_value="1200" />
    <Content type="html" view="profile">
        <![CDATA[

		#requireResource("com.atlassian.jira.webresources:select-pickers")
        #requireResource("com.atlassian.jira.gadgets:common")
        #requireResource("com.atlassian.gadgets.publisher:ajs-gadgets")
        #requireResource("com.atlassian.jira.gadgets:g-filter-results")
        #requireResource("com.atlassian.auiplugin:ajs")
        #requireResource("com.scn.jira.scn-logtime-plugin:logtime-resources")
		#requireResource("com.atlassian.auiplugin:aui-select2")

        #includeResources()
        
        <br/>

        <table>
        <tbody>
            <tr>
                <td nowrap style="padding-left:10px;">
                    <div id="projects_picker_gadget_container"/>
                </td>
                <td id="wlsc" class="filterCheck" nowrap style="padding-left:10px">
                    <div style="width: 100%; display: flex;">
                        <div style="width: 50px">
                            <input id="ScnWl" type="checkbox" onclick="checkboxScnClick()" name="ScnWL" value="ScnWL" checked>
                            <label for="ScnWl" name="checkbox2_lbl" >WL*</label>
                        </div>
                        <div style="width: 50px">
                            <input id="ExtWl" type="checkbox" onclick="checkboxExtClick()" name="ExtWL" value="ExtWL" checked>
                            <label for="ExtWl" name="checkbox2_lbl2" >WL</label>
                        </div>
                    </div>
                </td>

                <td class="filterEmployee" nowrap>
                    <label> Employee(s) </label>
                </td>

                <td class="filterUser" nowrap>
                    <div id="users_picker_gadget_container"/>
                </td>
            </tr>
            <tr>
                <td class="emptyTd"><td>
            </tr>
		</tbody>
		</table>
        <table>
        <tbody>
            <tr>
                <td class="filterView">
                    <div style="display: flex;">
                        <button id="backbtn" class="back-btn" onclick="slideBack()" > </button>
                        <button id="periodId" class="aui-button aui-date-picker" type="date" onchange="changePeriod()"></button>
                        <button id="forwardbtn" class="forward-btn" onclick="slideForward()" > </button>
                        <button id="viewButton" class="btn-view" style="margin-left:20px" onclick="changeView()">Weekly view</button>
                        <button class="showWorklog" style="margin-left:10px" onclick="reloadMeClean()">Show Work Log </button>
                    </div>
                </td>
                <script type="text/javascript">
                    var buttonNameText=document.getElementById('viewButton').innerHTML;
                </script>
            </tr>
		</tbody> 
		</table>

		<br></br>

		 <script type="text/javascript">
				AJS.$(document).ready(function() {
    				AJS.$('#periodId').datePicker({
    					'overrideBrowserDefault': true
    				});
				});
			   projectsPicker("projects_picker_gadget", null)(AJS.$("#projects_picker_gadget_container"));
			   var $projectsPicker = AJS.$('#projects_picker_gadget');
			   usersPicker("users_picker_gadget", null)(AJS.$("#users_picker_gadget_container"));
			   var $usersPicker = AJS.$('#users_picker_gadget');
			   document.getElementById('ScnWl').checked=true;
			   document.getElementById('ExtWl').checked=false;
			   var usersSelected = "";

			   var currentPeriod=0;			 				 		   
		  	   var slideStep=0;
		  	   
		  	   var scnWlCheck=document.getElementById('ScnWl').checked==true?1:0;     
               var extWlCheck=document.getElementById('ExtWl').checked==true?1:0;
               var assignedCheck=0;//document.getElementById('Assigned').checked==true?1:0;

               var gadget123 = createGadget();

            function checkboxScnClick(){
           	  scnWlCheck=document.getElementById('ScnWl').checked==true?1:0;
            }	

			function checkboxExtClick(){
           	  extWlCheck=document.getElementById('ExtWl').checked==true?1:0;
            }	
           
           function checkboxAssignedClick(){
           	  assignedCheck=document.getElementById('Assigned').checked==true?1:0;
           }	
           
                                   
             function checkProjects(prjId){
              	if ($projectsPicker.val() && $projectsPicker.val().lastIndexOf(prjId) == -1) {
              		$projectsPicker.val($projectsPicker.val() + ',' + prjId).trigger('change');
              	}
             };
            
            function reloadMeClean(){
            	slideStep = document.getElementById('slideStepHidden') ? document.getElementById('slideStepHidden').value : slideStep;
            	currentPeriod=0;
            	reloadMe();
            }

            function reloadMe(){
            	gadget123.showView(true);
			};

			 function changeView(){
           		if(document.getElementById('viewButton').innerHTML=="Weekly view"){           			
           			document.getElementById('viewButton').innerHTML="Monthly view";
           		}else{
           			document.getElementById('viewButton').innerHTML="Weekly view"
           		}
           		buttonNameText=document.getElementById('viewButton').innerHTML;
           		
           		
            	currentPeriod=1;
            	slideStep = document.getElementById('slideStepHidden').value;
            	reloadMe();
            	currentPeriod=0;
			};		

			function slideForward(){
				currentPeriod=0;	
				
				document.getElementById('slideStepHidden').value= parseInt(document.getElementById('slideStepHidden').value)+1;
				
				slideStep = document.getElementById('slideStepHidden').value;
				
				reloadMe();			
				
			}
			
			function slideBack(){
				currentPeriod=0;	
				
				document.getElementById('slideStepHidden').value= parseInt(document.getElementById('slideStepHidden').value)-1;							
				slideStep = document.getElementById('slideStepHidden').value;
				
				reloadMe();			
			}

			function changePeriod() {
    			let periodicity = (document.getElementById('viewButton').innerHTML === 'Weekly view') ? 'month' : 'isoWeek';
    			let diff = moment(AJS.$('#periodId').val()).startOf(periodicity).diff(moment().startOf(periodicity), (periodicity === 'month') ? 'months' : 'weeks', true);
    			currentPeriod = 0;
    			AJS.$('#slideStepHidden').val(diff);
    			slideStep = diff;
    			reloadMe();
			}
			
			function customKeyUp(event,isScn,userIdentifier,identifierSE,value,idetifier){
			   	var keyCode = ('which' in event) ? event.which : event.keyCode;
				if(keyCode == 13){
					onFunctionLost1(isScn,userIdentifier,identifierSE);
				}
				if(keyCode == 27){
					closeInplace(value,idetifier);
				}
				if(keyCode == 9){
					onFunctionLost1(isScn,userIdentifier,identifierSE);
					var i = parseInt(idetifier) + 1;					
					openinplaceSlow(userIdentifier,identifierSE,i,isScn);			
				}
			}
			
			function popUpPress(event){
				var keyCode = ('which' in event) ? event.which : event.keyCode;
				if(keyCode == 13){
					if(!AJS.$(document.activeElement).is('textarea')){
						addUpdateWorklog();
					}	
				}
				if(keyCode == 27){
					cancelWorklogAJAX();
				}	
				
			}

			function createGadget() {
				var needUpdateProps = true;
				return AJS.Gadget({
                    baseUrl: "__ATLASSIAN_BASE_URL__",
                    useOauth: "/rest/gadget/1.0/currentUser",
                    config: {
                        descriptor: function (args) {
                            var gadget = this;
                            needUpdateProps = true;
                            return  {
                                theme: "gdt",
                                fields: [
									{
										id: "picker_projectlist",
										userpref: "projectlist",
										label: "Projects",
										description: "Projects list",
										type: "callbackBuilder",
										callback: projectsPicker("projectlist", gadget.getPref("projectlist"))
									},
									{
										id: "picker_userslist",
										userpref: "userslist",
										label: "Users",
										description: "Users list",
										type: "callbackBuilder",
										callback: usersPicker("userslist", gadget.getPref("userslist"))
									},
									checkbox(gadget, "wlScnCheck", 'Show WL*', gadget.getPref('wlScnCheck') == 'true'),
									checkbox(gadget, "wlExtCheck", 'Show WL', gadget.getPref('wlExtCheck') == 'true')
								]
                            };
                        }
                    },
					view:{
                        onResizeAdjustHeight: false,
                        onResizeReload: false,
						enableReload: true,
                        template: function(args) {
                            var gadget = this;
                            gadget.getView().html(args.projectsobj.html);

                        },
                        args: [
                        {
                            key: "projectsobj",
                            ajaxOptions: function() {
                            	var gadget = this;
                            	if (needUpdateProps) {
                            		$projectsPicker.val(gadget.getPref('projectlist')).trigger('change');
                            		$usersPicker.val(gadget.getPref('userslist')).trigger('change');
									document.getElementById('ScnWl').checked = (gadget.getPref('wlScnCheck') == 'true');
									document.getElementById('ExtWl').checked = (gadget.getPref('wlExtCheck') == 'true');
									scnWlCheck = document.getElementById('ScnWl').checked==true ? 1 : 0;
									extWlCheck = document.getElementById('ExtWl').checked==true ? 1 : 0;
									needUpdateProps = false;
								}

                                return {
                                    type: "POST",
                                    url: "/rest/logtime-gadget/1.0/projectsobj.json",
                                    timeout: 9*60*1000, // 9 minutes for Alex Murashko
                                    data: {
                                        projectId: this.getPref("project"),
                                        noCache: (new Date()).getTime(),
                                        scnWl:scnWlCheck,
                                        extWl:extWlCheck,
                                        assignedCheck:assignedCheck,
                                        prjList: $projectsPicker.val(),
                                        usersSelected: $usersPicker.val(),
                                        viewType:buttonNameText,
                                        currentPeriod:currentPeriod,
                                        currentslideStep: slideStep
                                    }
                                };
                            }
                        }
                        ]
                    }

                });
			}

			function checkbox(gadget, checkboxPref, label, selected, description) {
				return {
					userpref: checkboxPref,
					label: gadget.getMsg(label),
					id: "checkbox_" + checkboxPref,
					type: "callbackBuilder",
					callback: function (parentDiv)
					{
						// add the checkbox class and wrap with fieldset
						parentDiv.addClass('checkbox').wrap('<fieldset class="group" />');
						// remove the label added by the the caller code, as we want the label to appear after the input element
						parentDiv.parent().siblings('label').remove();
						// we don't want field-group and fieldset
						parentDiv.closest('.field-group').removeClass('field-group');
						// we don't want this legacy class either
						parentDiv.removeClass('builder-container');

						var checkboxId = checkboxPref+'_checkbox';
						var checkedHtml = selected ? ' checked' : '';
						var html = '<input type="checkbox" class="checkbox" id="'+checkboxId+'" '+checkedHtml+' />';
							html +='<label for="'+checkboxId+'">'+gadget.getMsg(label)+'</label>';
							html += '<input type="hidden" id="'+checkboxPref+'" name="'+checkboxPref+'" value="'+selected+'" />';
						parentDiv.append(AJS.$(html));

						// make sure we update the values that get submitted
						AJS.$('#'+checkboxId, parentDiv).each(function() {
							var checkbox = this;
							var $checkbox = AJS.$(checkbox);
							$checkbox.change(function() {
								var hiddenInputSelector = '#'+checkboxPref;
								AJS.$(hiddenInputSelector).attr('value', checkbox.checked);
							});
						});

						// add description
						if (description) {
							parentDiv.append(AJS.$("<div/>").addClass("description").text(gadget.getMsg(description)));
						}
					}
				};
			}

			function projectsPicker(projectUserPref, projectUserPrefValue) {
				return function(parentDiv) {
					// add a project options box and description. Note that the label has already been added
					parentDiv.append(AJS.$("<input/>").attr({
						id: projectUserPref,
						name: projectUserPref,
						value: projectUserPrefValue
					}).addClass('textfield text'));
					AJS.$.ajax({
					  url: "/rest/logtime-gadget/1.0/projectsuser.json",
					  timeout: 9*60*1000, // 9 minutes for Alex Murashko
					  type: "GET",
					  dataType: "json",
					  success: function(msg) {
							AJS.$("#"+projectUserPref).auiSelect2({
							 	placeholder: 'All projects',
							 	allowClear: true,
								minimumInputLength: 2,
								multiple: true,
								width: 'resolve',
								data: AJS.$.map(msg.projects, function(val) { return {id: val.id, text: val.name + " (" + val.key + ")", key: val.key}}),
								formatSelection: function(state) {
									return state.key;
								}
							});
						}
					});
				}
			}

			function usersPicker(userPref, userPrefValue) {
				return function(parentDiv) {
					// add a project options box and description. Note that the label has already been added
					parentDiv.append(AJS.$("<input/>").attr({
							id: userPref,
							name: userPref,
							type: "text",
							value: userPrefValue
						}).addClass('textfield text long-text'));

						AJS.$("#"+userPref).auiSelect2({
							placeholder: 'Select users',
							allowClear: true,
							minimumInputLength: 2,
							multiple: true,
							width: 'resolve',
							ajax: {
								transport: function (params) {
									return AJS.$.ajax({
										url: `/rest/api/2/user/picker.json?query=${params.data.query}&maxResults=${params.data.maxResults}`,
										type: "GET",
										dataType: "json",
										headers: {
											'Accept': "application/json, text/javascript, */*; q=0.01",
											'Content-Type': "application/json; charset=UTF-8"
										},
										success: params.success
									});
								},
								data: function(term) {
									return {
										query: term || '%',
										maxResults: 100
									};
								},
								results: function(data) {
									return {
										results: data.users
									};
								}
							},
							id: function(user) {
								return user.name;
							},
							initSelection: function (element, callback) {
								var newUserValue = AJS.$(element).val();
								callback(newUserValue ? newUserValue.split(',').map(user => ({ name: user.trim() })) : []);
							},
							formatSelection: function(user) {
								return user.name;
							},
							formatResult: function(user) {
								return user.html;
							}
						});
				}
			}
			
        </script>


        ]]>
    </Content>
</Module>
